# -----------------------------------------------------------------------------
# Selenium Pytest CI Workflow
# -----------------------------------------------------------------------------
# Description:
#   - Builds Docker image, starts Selenium Grid
#   - Waits for Docker healthchecks before running tests
#   - Always uploads Allure results, screenshots, and HTML report
#   - Sends email notification at the end
# -----------------------------------------------------------------------------

name: Selenium Pytest CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    # ----------------------------------------
    # Step 1: Checkout Code
    # ----------------------------------------
    - name: Checkout Code
      uses: actions/checkout@v4

    # ----------------------------------------
    # Step 2: Set up Docker Compose
    # ----------------------------------------
    - name: Set up Docker Compose
      run: docker compose version

    # ----------------------------------------
    # Step 3: Build and Start Selenium Grid
    # ----------------------------------------
    - name: Build and Start Selenium Grid
      run: docker compose up -d

    # ----------------------------------------
    # Step 4: Wait for Docker Healthchecks
    # ----------------------------------------
    - name: Wait for Selenium Grid healthcheck
      run: |
        echo "‚è≥ Waiting for selenium-hub healthcheck..."
        RETRIES=12
        for i in $(seq 1 $RETRIES); do
          STATUS=$(docker inspect --format='{{json .State.Health.Status}}' selenium-hub || true)
          if [[ "$STATUS" == '"healthy"' ]]; then
            echo "‚úÖ Selenium Grid is healthy!"
            exit 0
          fi
          echo "üïí Attempt $i/$RETRIES: Grid health status = $STATUS. Retrying in 5s..."
          sleep 5
        done
        echo "‚ùå Selenium Grid did not become healthy in time."
        exit 1

    # ----------------------------------------
    # Step 5: Run Selenium Tests
    # ----------------------------------------
    - name: Run Selenium Tests
      run: docker compose exec tests pytest

    # ----------------------------------------
    # Step 6.1: Install Allure CLI (Updated)
    # ----------------------------------------
    - name: Install Allure CLI
      if: always() # Run even if tests fail
      run: |
        echo "‚¨áÔ∏è Downloading Allure CLI..."
        curl -L -o allure-2.27.0.tgz https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
        tar -zxvf allure-2.27.0.tgz
        sudo mv allure-2.27.0 /opt/allure
        sudo ln -s /opt/allure/bin/allure /usr/bin/allure
        allure --version

    # ----------------------------------------
    # Step 6.2: Generate Allure HTML Report (Updated)
    # ----------------------------------------
    - name: Generate Allure HTML Report
      if: always() # Run even if tests fail
      run: |
        sudo mkdir -p reports/allure-report
        sudo allure generate reports/allure-results -o reports/allure-report --clean || echo "‚ö†Ô∏è Allure generation failed"

    # ----------------------------------------
    # Step 7: Upload Allure Results (Raw XML)
    # ----------------------------------------
    - name: Upload Allure Results
      if: always() # Run even if tests fail
      uses: actions/upload-artifact@v4
      with:
        name: allure-results
        path: reports/allure-results/

    # ----------------------------------------
    # Step 8: Upload Allure HTML Report
    # ----------------------------------------
    - name: Upload Allure HTML Report
      if: always() # Run even if tests fail
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: reports/allure-report/

    # ----------------------------------------
    # Step 9: Upload Screenshots
    # ----------------------------------------
    - name: Upload Screenshots
      if: always() # Run even if tests fail
      uses: actions/upload-artifact@v4
      with:
        name: screenshots
        path: reports/screenshots/

    # ----------------------------------------
    # Step 10: Send Email Notification
    # ----------------------------------------
    - name: Send Email Notification
      if: always() # Send email regardless of success/failure
      uses: dawidd6/action-send-mail@v4
      with:
        server_address: smtp.yourprovider.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: Selenium Pytest CI - ${{ job.status }}
        body: |
          Hi Reshma,
          
          The Selenium Pytest CI workflow has completed.
          ‚úÖ Status: ${{ job.status }}
          üì¶ Repository: ${{ github.repository }}
          üìù Workflow: ${{ github.workflow }}
          üîó Run URL: ${{ github.run_url }}

          üìÅ Artifacts Available:
          - Allure Results
          - Allure HTML Report
          - Screenshots

          Regards,
          GitHub Actions
        to: reshmasajeevpulickal@email.com
        from: ${{ secrets.EMAIL_USERNAME }}
