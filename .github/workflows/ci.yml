# -----------------------------------------------------------------------------
# Selenium Pytest CI Workflow (Final - Host Sync for Allure & Artifacts)
# -----------------------------------------------------------------------------
name: Selenium Pytest CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    # ----------------------------------------
    # Step 1: Checkout Code
    # ----------------------------------------
    - name: Checkout Code
      uses: actions/checkout@v4

    # ----------------------------------------
    # Step 2: Set up Docker Compose
    # ----------------------------------------
    - name: Set up Docker Compose
      run: docker compose version

    # ----------------------------------------
    # Step 3: Cache Docker Layers
    # ----------------------------------------
    - name: Cache Docker Layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ github.sha }}

    # ----------------------------------------
    # Step 4: Build and Start Docker Compose
    # ----------------------------------------
    - name: Build and Start Docker Compose
      run: docker compose up --build -d

    # ----------------------------------------
    # Step 5: Run Selenium Tests inside Docker
    # ----------------------------------------
    - name: Run Selenium Tests
      id: run_tests
      run: |
        echo "üöÄ Running Selenium tests..."
        set +e  # Allow test failures without failing job
        docker compose exec tests /bin/bash -c "./wait-for-grid.sh pytest -v --alluredir=/app/reports/allure-results"
        TEST_EXIT_CODE=$?
        echo "Test Exit Code: $TEST_EXIT_CODE"
        echo "test_status=$TEST_EXIT_CODE" >> $GITHUB_ENV
        exit 0  # Always succeed; handle test failures later

    # ----------------------------------------
    # Step 6: Install Allure CLI
    # ----------------------------------------
    - name: Install Allure CLI
      if: always()
      run: |
        echo "‚¨áÔ∏è Installing Allure CLI..."
        sudo apt-get update
        sudo apt-get install -y openjdk-11-jre-headless wget unzip
        wget https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
        tar -xvzf allure-2.27.0.tgz
        sudo mv allure-2.27.0 /opt/allure
        sudo ln -s /opt/allure/bin/allure /usr/bin/allure
        allure --version

    # ----------------------------------------
    # Step 7: Generate Allure HTML Report
    # ----------------------------------------
    - name: Generate Allure HTML Report
      if: always()
      run: |
        sudo chmod -R 777 ./reports
        if [ -d "./reports/allure-results" ]; then
          allure generate ./reports/allure-results -o ./reports/allure-report --clean || echo "‚ö†Ô∏è Allure generation failed"
        else
          echo "‚ö†Ô∏è No Allure results found. Skipping report generation."
        fi

    # ----------------------------------------
    # Step 8: Upload Allure Results (Raw XML)
    # ----------------------------------------
    - name: Upload Allure Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-results
        path: ./reports/allure-results/
        if-no-files-found: warn

    # ----------------------------------------
    # Step 9: Upload Allure HTML Report
    # ----------------------------------------
    - name: Upload Allure HTML Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: ./reports/allure-report/
        if-no-files-found: warn

    # ----------------------------------------
    # Step 10: Upload Screenshots
    # ----------------------------------------
    - name: Upload Screenshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: screenshots
        path: ./reports/screenshots/
        if-no-files-found: warn

    # ----------------------------------------
    # Step 11: Send Email Notification
    # ----------------------------------------
    - name: Send Email Notification
      if: always()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: |
          Selenium Pytest CI - ${{ env.test_status == '0' && 'SUCCESS' || 'FAILURE' }}
        body: |
          Hi Reshma,

          ‚úÖ Build Status: SUCCESS
          üìä Test Status: ${{ env.test_status == '0' && 'PASSED' || 'FAILED' }}
          üìÅ Artifacts: Allure Results, Allure Report, Screenshots
          üîó Run URL: ${{ github.run_url }}

          Regards,
          GitHub Actions
        to: reshmasajeevpulickal@email.com
        from: ${{ secrets.EMAIL_USERNAME }}

    # ----------------------------------------
    # Step 12: Fail Job if Build Errors
    # ----------------------------------------
    - name: Fail Job if Build Errors
      if: failure()
      run: exit 1

    # ----------------------------------------
    # Step 13: Stop Docker Compose
    # ----------------------------------------
    - name: Stop Docker Compose
      if: always()
      run: docker compose down
