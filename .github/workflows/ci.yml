# -----------------------------------------------------------------------------
# Selenium Pytest CI Workflow (Updated - Clean Separation + Docker Caching)
# -----------------------------------------------------------------------------
# Description:
#   - Builds Docker image and starts Selenium Grid
#   - Runs Selenium tests and captures test result status
#   - Always uploads Allure results, screenshots, and HTML report
#   - Sends email notification at the end
#   - Docker layer caching enabled to reduce build/setup time
#   - Workflow fails only if build/setup fails (not test failures)
# -----------------------------------------------------------------------------

name: Selenium Pytest CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    # ----------------------------------------
    # Step 1: Checkout Code
    # ----------------------------------------
    - name: Checkout Code
      uses: actions/checkout@v4

    # ----------------------------------------
    # Step 2: Set up Docker Compose
    # ----------------------------------------
    - name: Set up Docker Compose
      run: docker compose version

    # ----------------------------------------
    # Step 2.5: Cache Docker Layers
    # ----------------------------------------
    - name: Cache Docker Layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ github.sha }}
        policy: pull

    # ----------------------------------------
    # Step 3: Build and Start Selenium Grid
    # ----------------------------------------
    - name: Build and Start Selenium Grid
      run: docker compose up -d

    # ----------------------------------------
    # Step 4: Wait for Docker Healthchecks
    # ----------------------------------------
    - name: Wait for Selenium Grid healthcheck
      run: |
        echo "‚è≥ Waiting for selenium-hub healthcheck..."
        RETRIES=12
        for i in $(seq 1 $RETRIES); do
          STATUS=$(docker inspect --format='{{json .State.Health.Status}}' selenium-hub || true)
          if [[ "$STATUS" == '"healthy"' ]]; then
            echo "‚úÖ Selenium Grid is healthy!"
            exit 0
          fi
          echo "üïí Attempt $i/$RETRIES: Grid health status = $STATUS. Retrying in 5s..."
          sleep 5
        done
        echo "‚ùå Selenium Grid did not become healthy in time."
        exit 1

    # -----------------
